#!/usr/bin/env groovy
@Library('DRC_Global_Pipeline_Libraries@v1.3.0')

// CONSTANTS
//
def leAcctNum = "177429746880"
def prodAcctNum = "385888483640"
def prodAccountBranches = ['master', 'staging']
def branchesAlwaysBuilt = ['develop', 'sqa'] + prodAccountBranches
def clients = ['tabe']
def regions = ['us-east-1', 'us-east-2']
def stageDataList = [
	{ name: 'runUnitTests', defaultAutoValue: true, defaultManualValue: true },
	{ name: 'runIntTests',  defaultAutoValue: true, defaultManualValue: true },
	{ name: 'runVulnCheck', defaultAutoValue: true, defaultManualValue: true },
//	{ name: 'runStaticAnalysis', defaultAutoValue: true,  defaultManualValue: true },
	{ name: 'uploadMasterFormImages', defaultAutoValue: true,  defaultManualValue: true },
]

// When I declared this with 'def' it was not seen as having a value in all places.
devTeamChatUrl = 'https://chat.googleapis.com/v1/spaces/AAAARqVi1KU/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=6yglYc02qH8R_QEPa4GPyubfYe_-rzrkg0ZIcb9XkDI%3D'

// VARIABLES
//
def buildInstigator = ''
def isAutoBuild = false;

boolean isCollectionOrArray(object) {
    [Collection, Object[]].any { it.isAssignableFrom(object.getClass()) }
}

pipeline {
  tools {
    nodejs 'NODE_8_LTS'
  }

  environment {
    SCM_URL = scm.getUserRemoteConfigs()[0].getUrl()
    buildInstigator = sh(returnStdout: true, script: "git log -1 --format='%an' ${env.GIT_COMMIT}").trim()
  }

  parameters {
	booleanParam(description: 'Run Unit Tests', 		name: 'runUnitTests',  defaultValue: isAutoBuild)
	booleanParam(description: 'Run integration Tests', name: 'runIntTests',   defaultValue: isAutoBuild)
	booleanParamdescription: 'Run vulnerability check', name: 'runVulnCheck',  defaultValue: isAutoBuild)
//	booleanParam()description: 'Run static analysis', 	name: 'runStaticAnalysis', defaultValue: isAutoBuild)
	booleanParam(description: 'Please only upload master form images if some have changed',
		name: 'uploadMasterFormImages',  defaultValue: isAutoBuild)
    choice(description: 'Select a common branch', name: 'branchSelected', choices: branchesAlwaysBuilt, defaultValue: '')
	gitParameter(description: 'Select a branch', name: 'GIT_BRANCH',
				 branchFilter: 'refs/heads/(.*)', tagFilter: '*', type: 'PT_BRANCH_TAG'
				 branch: ${branchTyped || branchSelected || env.GIT_BRANCH},
				 quickFilterEnabled: true, sortMode: 'ASCENDING_SMART')
//	string(description: 'Enter a custom branch', name: 'branchTyped', defaultValue: '')
  }

    // TODO: Change default back to false when we are no longer expiring master forms every 14 days.
    booleanParam(defaultValue: true, description: 'Please only upload master form images if some have changed', name: 'uploadMasterFormImages')
  }

  options {
    ansiColor('xterm')
    buildDiscarder(logRotator(daysToKeepStr: '7', artifactNumToKeepStr: '50'))
  }

  triggers {
    issueCommentTrigger('.*test this please.*')
  }

  agent {
    node {
      label 'coel7_agent_aws&&aws&&role_prod'
    }
  }

  stages {
	stage('Conditional execution') {
		// https://jenkins.io/doc/book/pipeline/syntax/#when
		when {
			beforeAgent true // Check conditions before starting agent
			anyOf {
				expression { BRANCH_NAME in branchesAlwaysBuilt }
				tag "release-*";
			}
		}
		steps {
			echo "Conditionally executing stage."
		}
	}

    // Since we don't mock S3, these have to be uploaded prior to running specs
    stage('Upload DEV, SQA, LoadTest Master Form Images') {
      when {
        branch 'develop'
        expression { params.uploadMasterFormImages }
      }
      steps {
        uploadMasterFormImagesToS3('dev')
        uploadMasterFormImagesToS3('sqa')
        uploadMasterFormImagesToS3('loadtest')
      }
    }

    stage('Upload Staging Master Form Images') {
      when {
        branch 'master'
        expression { params.uploadMasterFormImages }
      }
      steps {
        uploadMasterFormImagesToS3('stg')
      }
    }

    stage('Upload Prod Master Form Images') {
      when {
        branch 'master'
        expression { params.uploadMasterFormImages }
      }
      steps {
        uploadMasterFormImagesToS3('prod')
      }
    }

    stage('Test') {
      when {
        expression { params.runTests }
      }
      steps {
        withEnv(getEnvFor_OpenCV_and_Dynamo()) {
          sh 'npm config set registry http://registry.npmjs.org'
          sh 'echo unzip -o opencv4nodejs-min.zip'
          sh 'echo unzip -o tesseract.zip'
          sh 'echo npm install'
          sh 'echo npm update'
          sh 'echo npm run lint'
          assumeRole('dev')

          sh 'echo npm run local:sls:dynamo:install'

          // start serverless offline (which will start local dynamo and s3) and capture startup output
          sh 'echo nohup npm run local:sls:start > sls.out &'
          sleep 30
          sh 'cat sls.out'

          // use aws credentials for integration tests until S3 access not needed
          sh 'SKIP_PAYLOAD_LOG=true npm run ci:test'
        }
      }
      post {
        success {
          publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'artifacts/coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'artifacts', reportFiles: 'report.html', reportName: 'Unit Test Report', reportTitles: ''
          cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'artifacts/coverage/cobertura*.xml', conditionalCoverageTargets: '80, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
        }
      }
    }

    stage('Check Vulnerabilities') {
      when {
        anyOf { branch env.BRANCH_NAME }
      }
      steps {
        ansiColor('xterm') {
          withEnv(["PATH=./node_modules/.bin/:${env.PATH}"]) {
            script {
              try {
                sh 'echo npm run vuln_check'
              } catch (exitCode) {
                if (env.BRANCH_NAME == 'master') {
                  googlechatnotification(
                    message: "NPM dependency VULNERABILITIES found and need approval to continue " +
                      "${env.JOB_NAME} [${env.BUILD_NUMBER}], (<${env.BUILD_URL}|Link>) ", url: devTeamChatUrl)
                  drc_AskForPermission([name       : "Bypass vulnerabilities",
                                        to_time    : 20,
                                        to_unit    : 'MINUTES',
                                        id         : "VulnCheck${env.JOB_ID}",
                                        message    : "Bypass High/Critical vulnerabilities or abort?",
                                        submitter  : "gcoakley",
                                        description: 'Approve? Type "yes" to proceed'])
//                                        submitter  : "astevens,cnicholson,dmoos,dresch,gcoakley,grees,mwald,rcampbell,
                  if (currentBuild.result == 'ABORTED') {
                    error 'Aborting build because NPM dependency vulnerabilities were found and not accepted.'
                  }
                } else {
                  error 'NPM dependency vulnerabilities found.'
                }
              }
            }
          }
        }
      }
    }

    stage('Upload to Artifactory') {
      when {
        branch br_map[env.BRANCH_NAME]
      }
      steps {
        script {
          def myJson = readJSON file: "${env.WORKSPACE}/app/package.json"
          pkgNum = myJson.version
        }

        uploadToArtifactory([repo: arti_RepoMap[env.BRANCH_NAME],
                             pattern: "app/rpms/*-eca-security-service-${pkgNum}*.rpm",
                             git_proj: "eca-security-service",
                             arti_url: 'http://artifactory.datarecognitioncorp.com/artifactory',
                             isYumRepo: false])
        checkRPMArtifactory([arti_repo: arti_RepoMap[env.BRANCH_NAME],
                             context: 'all',
                             time_iter: 6,
                             app_name: 'eca-security-service',
                             ctx_dilimiter: '-',
      						 version: "${pkgNum}"])
      }
      post {
        always {
          dir('app/rpms') {
            deleteDir()
          }
        }
      }
	}

    stage('Deploy to DEV, SQA, LoadTest') {
      when {
        branch 'develop'
      }
      steps {
        sh 'rm -rf .serverless/'
        script {
          def tasksToExec = generateDeployTasks 'dev', leDeployTargets
          tasksToExec.each { k, v -> v() }
        }
      }
    }

    stage('Deploy to Staging') {
      when {
        branch 'master'
      }
      steps {
        sh 'rm -rf .serverless/'
        script {
          def tasksToExec = generateDeployTasks 'dev', stagingDeployTargets
          tasksToExec.each { k, v -> v() }
        }
      }
    }

    stage('Seed DEV, SQA, LoadTest Master Forms') {
      when {
        branch 'develop'
      }
      steps {
        withEnv(getEnvFor_OpenCV_and_Dynamo()) {
          sh 'echo unzip -o opencv4nodejs-min.zip'
          sh 'echo unzip -o tesseract.zip'
          sh 'echo npm install'
          assumeRole('dev')
          sh 'echo ENV=dev npm run seed:masterForms'
          sh 'echo ENV=sqa npm run seed:masterForms'
          sh 'echo ENV=loadtest npm run seed:masterForms'
        }
      }
    }

    stage('Seed Staging Master Forms') {
      when {
        branch 'develop'
      }
      steps {
        withEnv(getEnvFor_OpenCV_and_Dynamo()) {
          sh 'echo unzip -o opencv4nodejs-min.zip'
          sh 'echo unzip -o tesseract.zip'
          sh 'echo npm install'
          assumeRole('prod')
          sh 'echo ENV=stg npm run seed:masterForms'
        }
      }
    }

    stage('Deploy Production') {
      when {
        branch 'master'
      }
      steps {
        sh 'rm -rf .serverless/'
        script {
          def tasksToExec = generateDeployTasks 'prod', prodDeployTargets
          tasksToExec.each { k, v -> v() }
        }
      }
    }

    stage('Seed PRODUCTION Master Forms') {
      when {
        branch 'master'
      }
      steps {
        withEnv(getEnvFor_OpenCV_and_Dynamo()) {
          sh 'echo unzip -o opencv4nodejs-min.zip'
          sh 'echo unzip -o tesseract.zip'
          sh 'echo npm install'
          assumeRole('prod')
          sh 'echo ENV=prod npm run seed:masterForms'
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
    failure {
      script {
        if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'master') {
          googlechatnotification(message: "Build started by ${buildInstigator} failed for " +
            "${env.JOB_NAME} [${env.BUILD_NUMBER}], (<${env.BUILD_URL}|Link>)", url: devTeamChatUrl)
        }
      }
    }
    success {
      script {
        if ((GIT_BRANCH == 'develop' || GIT_BRANCH == 'master') && currentBuild?.getPreviousBuild()?.result == 'FAILURE') {
          googlechatnotification(message: "Build started by ${buildInstigator} was successful for " +
            "${env.JOB_NAME} [${env.BUILD_NUMBER}], (<${env.BUILD_URL}|Link>)", url: devTeamChatUrl)
        }
      }
    }
  }
}

def assumeRole(String environment) {
  def devAccount = '177429746880'
  def prodAccount = '385888483640'
  def devDuration = 14400 // 4hrs
  def prodDuration = 3600 // 1hr

  def roleAccount = (environment == 'prod') ? prodAccount : devAccount
  def duration = (environment == 'prod') ? prodDuration : devDuration

  def sessionNamePrefix = 'eca-form-recognition-service'

  echo "Assuming role with Account: [${roleAccount}] - Build Number: [${env.BUILD_NUMBER}]"
  drc_AwsAssumeRole([acctNum: roleAccount,
                     appName: sessionNamePrefix,
                     bldNum : env.BUILD_NUMBER,
                     timeout: duration])
}

def getEnvFor_OpenCV() {
  [
    "PATH=./:./node_modules/.bin:${env.PATH}",
    "LD_LIBRARY_PATH=./lib",
    "OPENCV4NODEJS_DISABLE_AUTOBUILD=1",
    "TESSDATA_PREFIX=./"
  ]
}

def getEnvFor_OpenCV_and_Dynamo() {
  def port = 8000
  def env = getEnvFor_OpenCV()
  env << "DYNAMO_PORT=${port}"
  env
}

def uploadMasterFormImagesToS3(String environment) {
  assumeRole (environment)
  s3Upload(
    bucket: "form-recognition-images-${environment}",
    file:'seedData/forms/TABE', // path in workspace <repo.>/...
    path:'TABE/forms/' // path in S3
  )
}

def generateDeployTasks(String environment, deployTargetsArray) {

  // deployTasks will contain the list of jobs to execute.
  def deployTasks = [:]
  assumeRole (environment)
  deployTargetsArray.each { deploy ->
    def slsStage = deploy.env
    def askForPermission = deploy.askForPermission

    if (askForPermission) {
      googlechatnotification message: "${buildInstigator} needs approval to deploy to ${slsStage}: " +
        "'${env.JOB_NAME} [${env.BUILD_NUMBER}]', (<${env.BUILD_URL}|Link>)", url: devTeamChatUrl
      drc_AskForPermission([name       : "Deploy to ${slsStage}",
                            to_time    : 2,
                            to_unit    : 'HOURS',
                            id         : "DeployTo${slsStage}",
                            message    : "Deploy to ${slsStage} or abort?",
                            submitter  : "astevens,cnicholson,dmoos,dresch,gcoakley,grees,mwald,rcampbell,rdyck,rjiroutek",
                            description: 'Approve deploy? Type "yes" to proceed'])
    }

    echo "current build status = ${currentBuild.result}"
    if (currentBuild.result == 'ABORTED') {
      googlechatnotification message: "Deployment by ${buildInstigator} to ${slsStage} aborted for " +
        "'${env.JOB_NAME} [${env.BUILD_NUMBER}]', (<${env.BUILD_URL}|Link>)", url: devTeamChatUrl
      echo "Exiting aborted Stage"
      return
    } else {
      googlechatnotification message: "Deployment by ${buildInstigator} to ${slsStage} approved for " +
        "'${env.JOB_NAME} [${env.BUILD_NUMBER}]', (<${env.BUILD_URL}|Link>)", url: devTeamChatUrl
      deploy.regions.each { region ->
        // define each deploy task as a closure so it defers execution.
        deployTasks["${slsStage} - ${region}"] = {
          node('coel7_agent_aws&&aws&&role_prod') {
            stage("deploy ${slsStage} - ${region}") {
              scmVars = checkout scm
              deployAssets(slsStage, region)
            }
          }
        }
      }
      deployTasks["globalTables-${slsStage}"] = {
        node('coel7_agent_aws&&aws&&role_prod') {
          stage("provision global tables ${slsStage}") {
            scmVars = checkout scm
            configGlobalTables(deploy)
          }
        }
      }
    }
  }
  return deployTasks
}

def deployAssets(String slsStage, String region) {
  echo "deployAssets START - ${slsStage} - ${region}"
  withEnv(["PATH=./node_modules/.bin:${env.PATH}"]) {
    sh 'node --version'
    sh 'npm --version'
    sh 'npm config set registry http://registry.npmjs.org'
    sh 'echo unzip -o opencv4nodejs-min.zip'
    sh 'echo unzip -o tesseract.zip'
    sh 'echo umask 0002 && npm install'
    sh 'echo chmod -R ugo+rx .'
    // sh "umask 0022 && sls remove --stage ${slsStage} --region ${region} --verbose"
    sh "umask 0002 && echo SLS_DEBUG=* sls deploy --stage ${slsStage} --region ${region} --verbose"
  }
  echo "deployAssets END  - ${slsStage} - ${region}"
}

def configGlobalTables(deployTarget) {
  echo "configGlobalTables START - ${deployTarget.env}"
  withEnv(getEnvFor_OpenCV()) {
    sh 'echo unzip -o opencv4nodejs-min.zip'
    sh 'echo npm install'
	def tables = ['scans', 'sessions', 'forms', 'pending', 'document-results']
    tables.each {
      sh "umask 0022 && echo node ./scripts/globalTables.js ECA-Local-Scanning-${it}-table-${deployTarget.env}-${deployTarget.client} ${deployTarget.regions.join(',')}"
    }
  }
  echo "configGlobalTables END - ${deployTarget.env}"
}

def generateVerificationTasks(stashName, environments) {

  def verifyTasks = [:]
  // // download jmeter

  environments.each { env ->
     verifyTasks[env.name] = {
       node('coel7_agent') {
         stage(env.name) {
           sh 'curl -v -O -L \'http://artifactory.datarecognitioncorp.com/artifactory/downloads/apache-jmeter-4.0.tgz/apache-jmeter-4.0.tgz\' && tar zxf apache-jmeter-4.0.tgz'
           runJmeter stashName, env
         }
       }
     }
   }
  return verifyTasks
}
def runJmeter(stashName, env) {
  echo "runJmeter received env name as :   ${env.name}"
  dir(path: "loadtest-results-${env.name}") {
    deleteDir()
  }
  sh "ls -lt"
  echo "unstashing ${stashName}"
  unstash stashName
  echo "unstash done"
  sh "ls"
  sh "apache-jmeter-4.0/bin/jmeter -f -n -t smoketests/ECA-Security-Service-SmokeTests.jmx -l jmeter.log -e -o ../smoketests-results-${env.name} -JapiBaseUrl=${env.apiGatewayUrl} \$(cat smoketests/configs/${env.name}_properties.txt)"
  publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "../smoketests-results-${env.name}", reportFiles: 'results-*.xml', reportName: "JMeter Verification Report ${env.name}", reportTitles: ''
  sh "ls -lr"
  // publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "loadtest-results", reportFiles: 'results.xml', reportName: "JMeter Results XML ${env.name}", reportTitles: ''
  def jmeterResults = sh(returnStdout: true, script: "cat smoketests-results-${env.name}/results.xml | wc -l").trim()
  def COLOR_MAP = ['SUCCESS': 'GREEN', 'FAILURE': 'RED', 'UNSTABLE': 'YELLOW', 'ABORTED': 'GRAY']
  if (new Integer(jmeterResults) > 4) {
    currentBuild.result = 'FAILURE'
    googlechatnotification message: "Security Service, verification of ${env.JOB_NAME} in ${env.name} for PR ${prTitle}:  ${currentBuild.result}', (<${env.BUILD_URL}|Link>)", url: 'https://chat.googleapis.com/v1/spaces/AAAAPSo2Vpg/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=CFhOMwzj_URdSa7sPx5egdt1fbMARFk5bbVQMsdobKg%3D'
    sh 'exit 1'
  }
}
